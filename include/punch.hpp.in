#pragma once

// resource handlers/data structures
#include <unordered_map>
#include <tuple>
#include <string>

// utility
#include <filesystem>
#include <ctime>

namespace fs = std::filesystem;

/**
 * A punch-card
 *
 * Write to a stream using the << operator.
 */
using card = std::tuple<std::tm, std::tm>;

namespace paths {
    inline fs::path const project{"@knockout_SOURCE_DIR@"};
    inline fs::path const resources = project/"resources";
    inline fs::path const punch_cards = resources/"punch-cards.csv";
    inline fs::path const punch_in = resources/"punch-in.txt";
    inline fs::path const archives = resources/"archives";
}

namespace formats {
    inline char const * const ctime = "%a %b %e %H:%M:%S %Y";
    inline char const * const day = "%a %m/%d";
    inline char const * const hour = "%R %p";
}

enum class Command {
    In, Out, Log, Clean, Archive, Help, Invalid
};

/**
 * Get a value from a map or a default value if the key doesn't exist
 *
 * :param map: the map to get the value from
 * :param key: the key to query with
 * :param default_value: the default value to use if key doesn't exist
 *
 * :return: map[key] if it exists, otherwise default_value
 */
template<typename K, typename V>
V map_get(std::unordered_map<K, V> const & map, K const & key,
          V const & default_value)
{
    auto const search = map.find(key);
    if (search != map.end()) {
        return search->second;
    }
    return default_value;
}
